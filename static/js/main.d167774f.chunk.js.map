{"version":3,"sources":["App.js","components/Result.js","components/KeyPad.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","ClickHandler","buttonClicked","showResult","slice","checkResult","includes","replace","eval","e","className","Result","KeyPad","name","onClick","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d167774f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Result from \"./components/Result\";\nimport KeyPad from \"./components/KeyPad\";\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n\n  const ClickHandler = (buttonClicked) => {\n    if (buttonClicked === \"=\") {\n      showResult();\n    } else if (buttonClicked === \"CE\") {\n      setResult(result.slice(0, -1));\n    } else if (buttonClicked === \"C\") {\n      setResult(\"\");\n    } else {\n      setResult(result + buttonClicked);\n    }\n  };\n\n  const showResult = () => {\n    var checkResult = \"\";\n    if (result.includes(\"--\")) {\n      checkResult = result.replace(\"--\", \"+\");\n    } else {\n      checkResult = result;\n    }\n\n    try {\n      setResult((eval(checkResult) || \"\") + \"\");\n    } catch (e) {\n      setResult(\"error\");\n    }\n  };\n\n  return (\n    <div className=\"App bg-primary mw-100 h-100\">\n      <h1 className=\"display-6 p-2 text-dark\">OverReact Calculator</h1>\n      <Result result={result} />\n      <KeyPad ClickHandler={ClickHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nfunction Result({ result }) {\n  return (\n    <div>\n      <p className=\"bg-light\">{result}</p>\n    </div>\n  );\n}\n\nexport default Result;\n","import React from \"react\";\n\nfunction KeyPad({ ClickHandler }) {\n  return (\n    <div>\n      <button className=\"btn p-4 m-2\" name=\"(\" onClick={(e) => ClickHandler(e.target.name)}>\n        (\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"CE\" onClick={(e) => ClickHandler(e.target.name)}>\n        CE\n      </button>\n      <button className=\"btn p-4 m-2\" name=\")\" onClick={(e) => ClickHandler(e.target.name)}>\n        )\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"C\" onClick={(e) => ClickHandler(e.target.name)}>\n        C\n      </button>\n\n      <br />\n\n      <button className=\"btn p-4 m-2\" name=\"1\" onClick={(e) => ClickHandler(e.target.name)}>\n        1\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"2\" onClick={(e) => ClickHandler(e.target.name)}>\n        2\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"3\" onClick={(e) => ClickHandler(e.target.name)}>\n        3\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"+\" onClick={(e) => ClickHandler(e.target.name)}>\n        +\n      </button>\n\n      <br />\n\n      <button className=\"btn p-4 m-2\" name=\"4\" onClick={(e) => ClickHandler(e.target.name)}>\n        4\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"5\" onClick={(e) => ClickHandler(e.target.name)}>\n        5\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"6\" onClick={(e) => ClickHandler(e.target.name)}>\n        6\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"-\" onClick={(e) => ClickHandler(e.target.name)}>\n        -\n      </button>\n\n      <br />\n\n      <button className=\"btn p-4 m-2\" name=\"7\" onClick={(e) => ClickHandler(e.target.name)}>\n        7\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"8\" onClick={(e) => ClickHandler(e.target.name)}>\n        8\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"9\" onClick={(e) => ClickHandler(e.target.name)}>\n        9\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"*\" onClick={(e) => ClickHandler(e.target.name)}>\n        x\n      </button>\n\n      <br />\n\n      <button className=\"btn p-4 m-2\" name=\".\" onClick={(e) => ClickHandler(e.target.name)}>\n        .\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"0\" onClick={(e) => ClickHandler(e.target.name)}>\n        0\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"=\" onClick={(e) => ClickHandler(e.target.name)}>\n        =\n      </button>\n      <button className=\"btn p-4 m-2\" name=\"/\" onClick={(e) => ClickHandler(e.target.name)}>\n        รท\n      </button>\n\n      <br />\n    \n    </div>\n  );\n}\n\nexport default KeyPad;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}